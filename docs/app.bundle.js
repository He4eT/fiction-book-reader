!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);n(5);let r={getSectionTitle:function(e){var t=e.getElementsByTagName("title")[0];return t?t.textContent:null},getAuthorData:function(e){var t=e.getElementsByTagName("first-name")[0],n=e.getElementsByTagName("middle-name")[0],r=e.getElementsByTagName("last-name")[0],o=e.getElementsByTagName("nickname")[0];return{first_name:t=t?t.textContent:"",middle_name:n=n?n.textContent:"",last_name:r=r?r.textContent:"",nickname:o=o?o.textContent:""}},render_section:function(e,t){var n;n="section"==e.tagName?document.createElement("section"):"cite"==e.tagName?document.createElement("blockquote"):"td"==e.tagName?document.createElement("td"):document.createElement("div"),"annotation"==e.tagName?n.className="annotation":"epigraph"==e.tagName&&(n.className="epigraph");for(var o=e.childNodes,a=0;a<o.length;a++)if(o[a].tagName)if("p"==o[a].tagName)n.appendChild(r.render_para(o[a],t));else if("empty-line"==o[a].tagName)n.appendChild(document.createElement("hr"));else if("subtitle"==o[a].tagName){var i=document.createElement("h3");i.innerHTML=o[a].textContent,n.appendChild(i),o[a].hasAttribute("id")&&(i.id=o[a].getAttribute("id"))}else if("section"==o[a].tagName)n.appendChild(r.render_section(o[a]));else if("cite"==o[a].tagName)n.appendChild(r.render_section(o[a]));else if("poem"==o[a].tagName)n.appendChild(r.render_poem(o[a]));else if("title"==o[a].tagName){var s=document.createElement("h2");n.appendChild(s),s.innerHTML=o[a].textContent}else"annotation"==o[a].tagName?n.appendChild(r.render_section(o[a])):"epigraph"==o[a].tagName?n.appendChild(r.render_section(o[a])):"table"==o[a].tagName?n.appendChild(r.render_table(o[a])):n.appendChild(document.createTextNode(o[a].textContent));return n},render_para:function(e,t){for(var n=document.createElement("p"),r=e.childNodes,o=0;o<r.length;o++)if(3==r[o].nodeType)n.appendChild(r[o].cloneNode());else{if(1!=r[o].nodeType)continue;if("emphasis"==r[o].tagName){var a=document.createElement("em");a.innerHTML=r[o].textContent,n.appendChild(a)}else if("strong"==r[o].tagName){var i=document.createElement("strong");i.innerHTML=r[o].textContent,n.appendChild(i)}else if("a"==r[o].tagName){var s=document.createElement("a");s.innerHTML=r[o].textContent,s.href=r[o].getAttribute("xlink:href"),s.className="note",n.appendChild(s)}else n.appendChild(document.createTextNode(r[o].textContent))}return n},render_poem:function(e){var t=document.createElement("div");t.className="poem";for(var n=e.childNodes,r=0;r<n.length;r++)if(n[r].tagName&&"stanza"==n[r].tagName){for(var o=document.createElement("p"),a=n[r].childNodes,i=0;i<a.length;i++)a[i].tagName&&"v"==a[i].tagName&&(o.appendChild(document.createTextNode(a[i].textContent)),o.appendChild(document.createElement("br")));t.appendChild(o)}return t},render_table:function(e){for(var t=document.createElement("table"),n=e.childNodes,o=0;o<n.length;o++)if(n[o].tagName&&"tr"==n[o].tagName){for(var a=document.createElement("tr"),i=n[o].childNodes,s=0;s<i.length;s++)i[s].tagName&&"td"==i[s].tagName&&a.appendChild(r.render_section(i[s]));t.appendChild(a)}return t}};(e=>{let t=document.getElementById(e);return new Promise((e,n)=>{t.addEventListener("change",function(){let t=this.files[0],n=new FileReader;n.readAsText(t),n.onload=function(){let t=(new DOMParser).parseFromString(n.result,"application/xml");e(t)}},!1)})})("bookInput").then(e=>new function(e){this.xml=e,this.toc=null,this.getBookTitle=function(){return this.xml.documentElement.getElementsByTagName("book-title")[0].textContent},this.getBookAuthors=function(){return this.getAuthorsFromElementId("title-info")},this.getDocumentAuthors=function(){return this.getAuthorsFromElementId("document-info")},this.getAuthorsFromElementId=function(e){var t=[];try{for(var n=this.xml.documentElement.getElementsByTagName(e)[0].getElementsByTagName("author"),o=0;o<n.length;o++)t.push(r.getAuthorData(n[o]))}catch(e){console.log(e)}return t},this.getBookAnnotation=function(){try{var e=this.xml.documentElement.getElementsByTagName("title-info")[0].getElementsByTagName("annotation")[0];return r.render_section(e)}catch(e){return console.log(e),document.createElement("div")}},this.getProgramUsed=function(){try{return this.xml.documentElement.getElementsByTagName("document-info")[0].getElementsByTagName("program-used")[0].textContent}catch(e){return console.log(e),""}},this.getDocumentDate=function(){try{return this.xml.documentElement.getElementsByTagName("document-info")[0].getElementsByTagName("date")[0].textContent}catch(e){return console.log(e),""}},this.getTableOfContents=function(){if(null!=this.toc)return this.toc;this.toc=[];for(var e=this.xml.documentElement.getElementsByTagName("body")[0].childNodes,t=0;t<e.length;t++)e[t].tagName&&"section"==e[t].tagName&&this.toc.push(e[t]);return this.toc},this.getNotes=function(){for(var e=this.xml.documentElement.getElementsByTagName("body"),t=[],n=1;n<e.length;n++)e[n].getAttribute("name").search("notes")>=0&&t.push(e[n]);return t}}(e)).then(e=>{let t=e.getTableOfContents().map(e=>e.textContent);return t.reduce((e,n)=>e+t)}).then((e=>t=>{(e=>t=>e.insertAdjacentHTML("beforeend",t))(document.getElementById(e))(t)})("book")).then((e=>()=>document.getElementById(e).style.display="none")("controls"))},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r,o,a={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,c=0,u=[],d=n(1);function m(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(y(r.parts[i],t))}else{var s=[];for(i=0;i<r.parts.length;i++)s.push(y(r.parts[i],t));a[r.id]={id:r.id,refs:1,parts:s}}}}function f(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}function p(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function g(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),v(t,e.attrs),p(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var i=c++;n=l||(l=g(t)),r=x.bind(null,n,i,!1),o=x.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),p(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=d(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(i),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){h(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return m(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var i=n[o];(s=a[i.id]).refs--,r.push(s)}e&&m(f(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete a[s.id]}}}};var b,N=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function x(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=N(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}var i;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,"body {\n  margin: 0;\n  padding: 0;\n}\n\n#controls {\n  padding: 50px;\n  text-align: center;\n}\n\n#book {\n  width: 100%;\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 50px;\n\n  white-space: pre-line;\n  text-align: justify;\n  line-height: 1.5;\n  font-size: 1.2em;\n}",""])},function(e,t,n){var r=n(4);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,